// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package secretgroupdb

import (
	"context"

	"github.com/google/uuid"
)

const createSecretGroup = `-- name: CreateSecretGroup :one
INSERT INTO secret_groups ( name, organization_id)
VALUES ($1, $2)
RETURNING id, name, description, organization_id, created_at, updated_at
`

type CreateSecretGroupParams struct {
	Name           string    `json:"name"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

func (q *Queries) CreateSecretGroup(ctx context.Context, arg CreateSecretGroupParams) (SecretGroup, error) {
	row := q.db.QueryRowContext(ctx, createSecretGroup, arg.Name, arg.OrganizationID)
	var i SecretGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSecretGroup = `-- name: DeleteSecretGroup :exec
DELETE FROM secret_groups WHERE id = $1
`

func (q *Queries) DeleteSecretGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSecretGroup, id)
	return err
}

const getSecretGroupByID = `-- name: GetSecretGroupByID :one
SELECT id, name, description, organization_id, created_at, updated_at FROM secret_groups WHERE id = $1
`

func (q *Queries) GetSecretGroupByID(ctx context.Context, id uuid.UUID) (SecretGroup, error) {
	row := q.db.QueryRowContext(ctx, getSecretGroupByID, id)
	var i SecretGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSecretGroupsByOrg = `-- name: ListSecretGroupsByOrg :many
SELECT id, name, description, organization_id, created_at, updated_at FROM secret_groups WHERE organization_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListSecretGroupsByOrg(ctx context.Context, organizationID uuid.UUID) ([]SecretGroup, error) {
	rows, err := q.db.QueryContext(ctx, listSecretGroupsByOrg, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretGroup
	for rows.Next() {
		var i SecretGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecretGroup = `-- name: UpdateSecretGroup :one
UPDATE secret_groups
SET name = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, description, organization_id, created_at, updated_at
`

type UpdateSecretGroupParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateSecretGroup(ctx context.Context, arg UpdateSecretGroupParams) (SecretGroup, error) {
	row := q.db.QueryRowContext(ctx, updateSecretGroup, arg.ID, arg.Name)
	var i SecretGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
