// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: secret_group_members_extended.sql

package secretgroupdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const listMembersOfSecretGroup = `-- name: ListMembersOfSecretGroup :many
SELECT 
  sgm.user_id,
  sgm.role,
  sgm.secret_group_id,
  sg.name AS secret_group_name
FROM secret_group_members sgm
JOIN secret_groups sg ON sgm.secret_group_id = sg.id
WHERE sgm.secret_group_id = $1
`

type ListMembersOfSecretGroupRow struct {
	UserID          uuid.UUID `json:"user_id"`
	Role            RoleType  `json:"role"`
	SecretGroupID   uuid.UUID `json:"secret_group_id"`
	SecretGroupName string    `json:"secret_group_name"`
}

func (q *Queries) ListMembersOfSecretGroup(ctx context.Context, secretGroupID uuid.UUID) ([]ListMembersOfSecretGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, listMembersOfSecretGroup, secretGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersOfSecretGroupRow
	for rows.Next() {
		var i ListMembersOfSecretGroupRow
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.SecretGroupID,
			&i.SecretGroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretGroupsWithMember = `-- name: ListSecretGroupsWithMember :many
SELECT 
  sg.id AS secret_group_id,
  sg.name,
  sg.organization_id,
  o.name AS organization_name,
  sg.created_at,
  sgm.user_id,
  sgm.role
FROM secret_group_members sgm
JOIN secret_groups sg ON sgm.secret_group_id = sg.id
JOIN organizations o ON sg.organization_id = o.id
WHERE sgm.user_id = $1 AND  sg.organization_id = $2
`

type ListSecretGroupsWithMemberParams struct {
	UserID         uuid.UUID `json:"user_id"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

type ListSecretGroupsWithMemberRow struct {
	SecretGroupID    uuid.UUID `json:"secret_group_id"`
	Name             string    `json:"name"`
	OrganizationID   uuid.UUID `json:"organization_id"`
	OrganizationName string    `json:"organization_name"`
	CreatedAt        time.Time `json:"created_at"`
	UserID           uuid.UUID `json:"user_id"`
	Role             RoleType  `json:"role"`
}

func (q *Queries) ListSecretGroupsWithMember(ctx context.Context, arg ListSecretGroupsWithMemberParams) ([]ListSecretGroupsWithMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, listSecretGroupsWithMember, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSecretGroupsWithMemberRow
	for rows.Next() {
		var i ListSecretGroupsWithMemberRow
		if err := rows.Scan(
			&i.SecretGroupID,
			&i.Name,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.CreatedAt,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
