// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: secret_group_members.sql

package secretgroupdb

import (
	"context"

	"github.com/google/uuid"
)

const addSecretGroupMember = `-- name: AddSecretGroupMember :exec
INSERT INTO secret_group_members (secret_group_id, user_id, role)
VALUES ($1, $2, $3)
`

type AddSecretGroupMemberParams struct {
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

// AddSecretGroupMember adds a user as a member to a secret group with a specific role.
// Used to grant access and permissions to users for a secret group.
func (q *Queries) AddSecretGroupMember(ctx context.Context, arg AddSecretGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, addSecretGroupMember, arg.SecretGroupID, arg.UserID, arg.Role)
	return err
}

const getSecretGroupMember = `-- name: GetSecretGroupMember :one
SELECT secret_group_id, user_id, role FROM secret_group_members
WHERE secret_group_id = $1 AND user_id = $2
`

type GetSecretGroupMemberParams struct {
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	UserID        uuid.UUID `json:"user_id"`
}

// GetSecretGroupMember fetches a specific member of a secret group by user ID.
// Used to check membership and permissions for a user in a secret group.
func (q *Queries) GetSecretGroupMember(ctx context.Context, arg GetSecretGroupMemberParams) (SecretGroupMember, error) {
	row := q.db.QueryRowContext(ctx, getSecretGroupMember, arg.SecretGroupID, arg.UserID)
	var i SecretGroupMember
	err := row.Scan(&i.SecretGroupID, &i.UserID, &i.Role)
	return i, err
}

const listSecretGroupMembers = `-- name: ListSecretGroupMembers :many
SELECT secret_group_id, user_id, role FROM secret_group_members
WHERE secret_group_id = $1
`

// ListSecretGroupMembers returns all members of a given secret group.
// Used to display or manage all users with access to a secret group.
func (q *Queries) ListSecretGroupMembers(ctx context.Context, secretGroupID uuid.UUID) ([]SecretGroupMember, error) {
	rows, err := q.db.QueryContext(ctx, listSecretGroupMembers, secretGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretGroupMember
	for rows.Next() {
		var i SecretGroupMember
		if err := rows.Scan(&i.SecretGroupID, &i.UserID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSecretGroupMember = `-- name: RemoveSecretGroupMember :exec
DELETE FROM secret_group_members
WHERE secret_group_id = $1 AND user_id = $2
`

type RemoveSecretGroupMemberParams struct {
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	UserID        uuid.UUID `json:"user_id"`
}

// RemoveSecretGroupMember removes a user from a secret group.
// Used to revoke access and permissions for a user in a secret group.
func (q *Queries) RemoveSecretGroupMember(ctx context.Context, arg RemoveSecretGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeSecretGroupMember, arg.SecretGroupID, arg.UserID)
	return err
}
