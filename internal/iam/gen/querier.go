// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package iam_db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// CreateRoleBinding: Creates a new role binding for a user on a specific resource
	// Used internally for creating role bindings with explicit user IDs and resource references
	// Returns the complete role binding record including generated ID and timestamps
	CreateRoleBinding(ctx context.Context, arg CreateRoleBindingParams) (RoleBinding, error)
	// DeleteRoleBinding: Removes a specific role binding from the system
	// Deletes the exact role binding identified by the composite key
	DeleteRoleBinding(ctx context.Context, arg DeleteRoleBindingParams) error
	// GetRoleBinding: Retrieves a specific role binding by its composite key
	// Used for validation and lookup operations when all binding parameters are known
	// Returns complete role binding record if found
	GetRoleBinding(ctx context.Context, arg GetRoleBindingParams) (RoleBinding, error)
	// GrantRoleBinding: Grants a role to a user or user group on a specific resource
	// Uses UPSERT semantics to create new role bindings or update existing ones
	// ON CONFLICT clause ensures idempotent behavior for duplicate role binding attempts
	// Supports both user-based (user_id) and group-based (group_id) role assignments
	GrantRoleBinding(ctx context.Context, arg GrantRoleBindingParams) error
	// ListAccessibleEnvironments: Retrieves all environments within a secret group that a user has access to
	// Joins with environments and secret_groups tables to get environment and group details
	// Filters for environment-level permissions within the specified secret group
	ListAccessibleEnvironments(ctx context.Context, arg ListAccessibleEnvironmentsParams) ([]ListAccessibleEnvironmentsRow, error)
	// ListAccessibleOrganizations: Retrieves all organizations that a user has access to
	// Joins with organizations table to get organization details along with user's role
	// Filters for organization-level permissions (no secret_group_id or environment_id)
	ListAccessibleOrganizations(ctx context.Context, userID uuid.NullUUID) ([]ListAccessibleOrganizationsRow, error)
	// ListAccessibleSecretGroups: Retrieves all secret groups within an organization that a user has access to
	// Joins with secret_groups and organizations tables to get group and org details
	// Filters for secret group-level permissions within the specified organization
	ListAccessibleSecretGroups(ctx context.Context, arg ListAccessibleSecretGroupsParams) ([]ListAccessibleSecretGroupsRow, error)
	// RevokeRoleBinding: Removes a role binding for a user or user group on a specific resource
	// Uses conditional logic to handle both user-based and group-based role bindings
	// Returns the number of affected rows to determine if the role binding existed
	// No error if role binding doesn't exist (idempotent operation)
	RevokeRoleBinding(ctx context.Context, arg RevokeRoleBindingParams) (sql.Result, error)
	// UpdateUserRole: Updates the role level for an existing role binding
	// Changes the role while preserving the binding relationship and updating the timestamp
	UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error
}

var _ Querier = (*Queries)(nil)
