// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions_management.sql

package iam_db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const grantRoleBinding = `-- name: GrantRoleBinding :exec
INSERT INTO role_bindings (
  user_id,
  group_id,
  role,
  resource_type,
  resource_id,
  organization_id,
  secret_group_id,
  environment_id
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, role, resource_type, resource_id, created_at, updated_at, organization_id, secret_group_id, environment_id, group_id
`

type GrantRoleBindingParams struct {
	UserID         uuid.NullUUID `json:"user_id"`
	GroupID        uuid.NullUUID `json:"group_id"`
	Role           UserRole      `json:"role"`
	ResourceType   ResourceType  `json:"resource_type"`
	ResourceID     uuid.UUID     `json:"resource_id"`
	OrganizationID uuid.UUID     `json:"organization_id"`
	SecretGroupID  uuid.NullUUID `json:"secret_group_id"`
	EnvironmentID  uuid.NullUUID `json:"environment_id"`
}

// GrantRoleBinding: Grants a role to a user or user group on a specific resource
// Uses UPSERT semantics to create new role bindings or update existing ones
// ON CONFLICT clause ensures idempotent behavior for duplicate role binding attempts
// Supports both user-based (user_id) and group-based (group_id) role assignments
func (q *Queries) GrantRoleBinding(ctx context.Context, arg GrantRoleBindingParams) error {
	_, err := q.db.ExecContext(ctx, grantRoleBinding,
		arg.UserID,
		arg.GroupID,
		arg.Role,
		arg.ResourceType,
		arg.ResourceID,
		arg.OrganizationID,
		arg.SecretGroupID,
		arg.EnvironmentID,
	)
	return err
}

const revokeRoleBinding = `-- name: RevokeRoleBinding :execresult
DELETE FROM role_bindings
WHERE
  ((user_id = $1 AND group_id IS NULL) OR (user_id IS NULL AND group_id = $2))
  AND role = $3
  AND resource_type = $4
  AND resource_id = $5
`

type RevokeRoleBindingParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	GroupID      uuid.NullUUID `json:"group_id"`
	Role         UserRole      `json:"role"`
	ResourceType ResourceType  `json:"resource_type"`
	ResourceID   uuid.UUID     `json:"resource_id"`
}

// RevokeRoleBinding: Removes a role binding for a user or user group on a specific resource
// Uses conditional logic to handle both user-based and group-based role bindings
// Returns the number of affected rows to determine if the role binding existed
// No error if role binding doesn't exist (idempotent operation)
func (q *Queries) RevokeRoleBinding(ctx context.Context, arg RevokeRoleBindingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, revokeRoleBinding,
		arg.UserID,
		arg.GroupID,
		arg.Role,
		arg.ResourceType,
		arg.ResourceID,
	)
}
