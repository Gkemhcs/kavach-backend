// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package providerdb

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createProviderCredential = `-- name: CreateProviderCredential :one
INSERT INTO provider_credentials (environment_id, provider, credentials, config,created_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, environment_id, provider, credentials, config, created_by, created_at, updated_at
`

type CreateProviderCredentialParams struct {
	EnvironmentID uuid.UUID       `json:"environment_id"`
	Provider      string          `json:"provider"`
	Credentials   []byte          `json:"credentials"`
	Config        json.RawMessage `json:"config"`
	CreatedBy     uuid.UUID       `json:"created_by"`
}

func (q *Queries) CreateProviderCredential(ctx context.Context, arg CreateProviderCredentialParams) (ProviderCredential, error) {
	row := q.db.QueryRowContext(ctx, createProviderCredential,
		arg.EnvironmentID,
		arg.Provider,
		arg.Credentials,
		arg.Config,
		arg.CreatedBy,
	)
	var i ProviderCredential
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Provider,
		&i.Credentials,
		&i.Config,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProviderCredential = `-- name: DeleteProviderCredential :exec
DELETE FROM provider_credentials 
WHERE environment_id = $1 AND provider = $2
`

type DeleteProviderCredentialParams struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	Provider      string    `json:"provider"`
}

func (q *Queries) DeleteProviderCredential(ctx context.Context, arg DeleteProviderCredentialParams) error {
	_, err := q.db.ExecContext(ctx, deleteProviderCredential, arg.EnvironmentID, arg.Provider)
	return err
}

const getProviderCredential = `-- name: GetProviderCredential :one
SELECT id, environment_id, provider, credentials, config, created_by, created_at, updated_at FROM provider_credentials 
WHERE environment_id = $1 AND provider = $2
`

type GetProviderCredentialParams struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	Provider      string    `json:"provider"`
}

func (q *Queries) GetProviderCredential(ctx context.Context, arg GetProviderCredentialParams) (ProviderCredential, error) {
	row := q.db.QueryRowContext(ctx, getProviderCredential, arg.EnvironmentID, arg.Provider)
	var i ProviderCredential
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Provider,
		&i.Credentials,
		&i.Config,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProviderCredentialByID = `-- name: GetProviderCredentialByID :one
SELECT id, environment_id, provider, credentials, config, created_by, created_at, updated_at FROM provider_credentials 
WHERE id = $1
`

func (q *Queries) GetProviderCredentialByID(ctx context.Context, id uuid.UUID) (ProviderCredential, error) {
	row := q.db.QueryRowContext(ctx, getProviderCredentialByID, id)
	var i ProviderCredential
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Provider,
		&i.Credentials,
		&i.Config,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProviderCredentials = `-- name: ListProviderCredentials :many
SELECT id, environment_id, provider, credentials, config, created_by, created_at, updated_at FROM provider_credentials 
WHERE environment_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) ListProviderCredentials(ctx context.Context, environmentID uuid.UUID) ([]ProviderCredential, error) {
	rows, err := q.db.QueryContext(ctx, listProviderCredentials, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProviderCredential
	for rows.Next() {
		var i ProviderCredential
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.Provider,
			&i.Credentials,
			&i.Config,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProviderCredential = `-- name: UpdateProviderCredential :one
UPDATE provider_credentials 
SET credentials = $3, config = $4, updated_at = now()
WHERE environment_id = $1 AND provider = $2
RETURNING id, environment_id, provider, credentials, config, created_by, created_at, updated_at
`

type UpdateProviderCredentialParams struct {
	EnvironmentID uuid.UUID       `json:"environment_id"`
	Provider      string          `json:"provider"`
	Credentials   []byte          `json:"credentials"`
	Config        json.RawMessage `json:"config"`
}

func (q *Queries) UpdateProviderCredential(ctx context.Context, arg UpdateProviderCredentialParams) (ProviderCredential, error) {
	row := q.db.QueryRowContext(ctx, updateProviderCredential,
		arg.EnvironmentID,
		arg.Provider,
		arg.Credentials,
		arg.Config,
	)
	var i ProviderCredential
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Provider,
		&i.Credentials,
		&i.Config,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
