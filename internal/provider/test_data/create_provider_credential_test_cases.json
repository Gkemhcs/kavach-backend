{
  "test_cases": [
    {
      "name": "success_create_github_provider",
      "description": "Successfully create a GitHub provider credential",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "github",
        "credentials": {
          "token": "ghp_test_token_12345"
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": true,
        "provider_credential": {
          "id": "550e8400-e29b-41d4-a716-446655440003",
          "environment_id": "550e8400-e29b-41d4-a716-446655440001",
          "provider": "github"
        }
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": [
          {
            "method": "GetProviderCredential",
            "return": {
              "error": "sql: no rows in result set"
            }
          },
          {
            "method": "CreateProviderCredential",
            "return": {
              "provider_credential": {
                "id": "550e8400-e29b-41d4-a716-446655440003",
                "environment_id": "550e8400-e29b-41d4-a716-446655440001",
                "provider": "github"
              }
            }
          }
        ]
      }
    },
    {
      "name": "success_create_gcp_provider",
      "description": "Successfully create a GCP provider credential",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "gcp",
        "credentials": {
          "type": "service_account",
          "project_id": "test-project",
          "private_key_id": "test-key-id",
          "private_key": "-----BEGIN PRIVATE KEY-----\ntest-key\n-----END PRIVATE KEY-----",
          "client_email": "test@test-project.iam.gserviceaccount.com"
        },
        "config": {
          "project_id": "test-project"
        }
      },
      "expected": {
        "success": true,
        "provider_credential": {
          "id": "550e8400-e29b-41d4-a716-446655440004",
          "environment_id": "550e8400-e29b-41d4-a716-446655440001",
          "provider": "gcp"
        }
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": [
          {
            "method": "GetProviderCredential",
            "return": {
              "error": "sql: no rows in result set"
            }
          },
          {
            "method": "CreateProviderCredential",
            "return": {
              "provider_credential": {
                "id": "550e8400-e29b-41d4-a716-446655440004",
                "environment_id": "550e8400-e29b-41d4-a716-446655440001",
                "provider": "gcp"
              }
            }
          }
        ]
      }
    },
    {
      "name": "error_invalid_provider_type",
      "description": "Fail to create provider credential with invalid provider type",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "invalid_provider",
        "credentials": {
          "token": "test_token"
        },
        "config": {
          "test": "config"
        }
      },
      "expected": {
        "success": false,
        "error_code": "invalid_provider_type"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_invalid_environment_id",
      "description": "Fail to create provider credential with invalid environment ID",
      "input": {
        "environment_id": "invalid-uuid",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "github",
        "credentials": {
          "token": "test_token"
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "internal_error"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_invalid_user_id",
      "description": "Fail to create provider credential with invalid user ID",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "invalid-uuid",
        "provider": "github",
        "credentials": {
          "token": "test_token"
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "internal_error"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_invalid_provider_data_github",
      "description": "Fail to create GitHub provider credential with invalid data",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "github",
        "credentials": {
          "token": ""
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "invalid_provider_data"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_provider_credential_exists",
      "description": "Fail to create provider credential when it already exists",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "github",
        "credentials": {
          "token": "ghp_test_token_12345"
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "provider_credential_exists"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": {
          "method": "GetProviderCredential",
          "return": {
            "provider_credential": {
              "id": "550e8400-e29b-41d4-a716-446655440003",
              "environment_id": "550e8400-e29b-41d4-a716-446655440001",
              "provider": "github"
            }
          }
        }
      }
    },
    {
      "name": "error_database_error",
      "description": "Fail to create provider credential due to database error",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "user_id": "550e8400-e29b-41d4-a716-446655440002",
        "provider": "github",
        "credentials": {
          "token": "ghp_test_token_12345"
        },
        "config": {
          "owner": "test-org",
          "repository": "test-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "provider_credential_create_failed"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": [
          {
            "method": "GetProviderCredential",
            "return": {
              "error": "sql: no rows in result set"
            }
          },
          {
            "method": "CreateProviderCredential",
            "return": {
              "error": "database connection failed"
            }
          }
        ]
      }
    }
  ]
} 