{
  "test_cases": [
    {
      "name": "success_update_provider_credential",
      "description": "Successfully update a provider credential",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "provider": "github",
        "credentials": {
          "token": "ghp_new_token_12345"
        },
        "config": {
          "owner": "new-org",
          "repository": "new-repo"
        }
      },
      "expected": {
        "success": true,
        "provider_credential": {
          "id": "550e8400-e29b-41d4-a716-446655440003",
          "environment_id": "550e8400-e29b-41d4-a716-446655440001",
          "provider": "github"
        }
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": [
          {
            "method": "UpdateProviderCredential",
            "return": {
              "provider_credential": {
                "id": "550e8400-e29b-41d4-a716-446655440003",
                "environment_id": "550e8400-e29b-41d4-a716-446655440001",
                "provider": "github"
              }
            }
          }
        ]
      }
    },
    {
      "name": "error_invalid_environment_id",
      "description": "Fail to update provider credential with invalid environment ID",
      "input": {
        "environment_id": "invalid-uuid",
        "provider": "github",
        "credentials": {
          "token": "ghp_new_token_12345"
        },
        "config": {
          "owner": "new-org",
          "repository": "new-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "internal_error"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_invalid_provider_type",
      "description": "Fail to update provider credential with invalid provider type",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "provider": "invalid_provider",
        "credentials": {
          "token": "test_token"
        },
        "config": {
          "test": "config"
        }
      },
      "expected": {
        "success": false,
        "error_code": "invalid_provider_type"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_invalid_provider_data",
      "description": "Fail to update provider credential with invalid data",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "provider": "github",
        "credentials": {
          "token": ""
        },
        "config": {
          "owner": "new-org",
          "repository": "new-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "invalid_provider_data"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        }
      }
    },
    {
      "name": "error_database_error",
      "description": "Fail to update provider credential due to database error",
      "input": {
        "environment_id": "550e8400-e29b-41d4-a716-446655440001",
        "provider": "github",
        "credentials": {
          "token": "ghp_new_token_12345"
        },
        "config": {
          "owner": "new-org",
          "repository": "new-repo"
        }
      },
      "expected": {
        "success": false,
        "error_code": "provider_credential_update_failed"
      },
      "mock_setup": {
        "factory": {
          "method": "GetSupportedProviders",
          "return": {
            "providers": ["github", "gcp", "azure"]
          }
        },
        "provider_repo": [
          {
            "method": "UpdateProviderCredential",
            "return": {
              "error": "database connection failed"
            }
          }
        ]
      }
    }
  ]
} 