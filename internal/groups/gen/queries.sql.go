// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package groupsdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addGroupMember = `-- name: AddGroupMember :exec
INSERT INTO user_group_members (user_group_id, user_id)
VALUES ($1, $2)
RETURNING user_id, user_group_id, created_at
`

type AddGroupMemberParams struct {
	UserGroupID uuid.UUID `json:"user_group_id"`
	UserID      uuid.UUID `json:"user_id"`
}

// AddGroupMember: Creates a membership relationship between a user and a user group
// Enforces unique constraint on (user_group_id, user_id) to prevent duplicate memberships
// Returns the created membership record for confirmation
func (q *Queries) AddGroupMember(ctx context.Context, arg AddGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, addGroupMember, arg.UserGroupID, arg.UserID)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO user_groups (organization_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, name, organization_id, description, created_at, updated_at
`

type CreateGroupParams struct {
	OrganizationID uuid.UUID      `json:"organization_id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
}

// CreateGroup: Creates a new user group within an organization
// Returns the complete group record including generated ID and timestamps
// Enforces unique constraint on (organization_id, name) combination
func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.OrganizationID, arg.Name, arg.Description)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM user_groups
WHERE id = $1 AND organization_id = $2
`

type DeleteGroupParams struct {
	ID             uuid.UUID `json:"id"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

// DeleteGroup: Removes a user group from an organization
// Only deletes if the group exists and belongs to the specified organization
// Cascading deletes will remove all group memberships automatically
func (q *Queries) DeleteGroup(ctx context.Context, arg DeleteGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, arg.ID, arg.OrganizationID)
	return err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, name, organization_id, description, created_at, updated_at FROM user_groups
WHERE name = $1 AND organization_id = $2
`

type GetGroupByNameParams struct {
	Name           string    `json:"name"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

// GetGroupByName: Retrieves a specific user group by name within an organization
// Used for validation and lookup operations when group name is known
// Returns complete group record including all metadata fields
func (q *Queries) GetGroupByName(ctx context.Context, arg GetGroupByNameParams) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getGroupByName, arg.Name, arg.OrganizationID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroupMembers = `-- name: ListGroupMembers :many
SELECT u.id, u.name, u.email, ugm.created_at
FROM user_group_members ugm
JOIN users u ON ugm.user_id = u.id
WHERE ugm.user_group_id = $1
ORDER BY ugm.created_at DESC
`

type ListGroupMembersRow struct {
	ID        uuid.UUID      `json:"id"`
	Name      sql.NullString `json:"name"`
	Email     sql.NullString `json:"email"`
	CreatedAt time.Time      `json:"created_at"`
}

// ListGroupMembers: Retrieves all members of a specific user group
// Joins with users table to get member details: id, name, email, membership date
// Ordered by membership creation date (newest first) for consistent display
func (q *Queries) ListGroupMembers(ctx context.Context, userGroupID uuid.UUID) ([]ListGroupMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroupMembers, userGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroupMembersRow
	for rows.Next() {
		var i ListGroupMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsByOrg = `-- name: ListGroupsByOrg :many
SELECT id, name, description, created_at
FROM user_groups
WHERE organization_id = $1
ORDER BY created_at DESC
`

type ListGroupsByOrgRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
}

// ListGroupsByOrg: Retrieves all user groups within an organization
// Returns minimal fields needed for listing: id, name, description, created_at
// Ordered by creation date (newest first) for consistent pagination
func (q *Queries) ListGroupsByOrg(ctx context.Context, organizationID uuid.UUID) ([]ListGroupsByOrgRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsByOrg, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroupsByOrgRow
	for rows.Next() {
		var i ListGroupsByOrgRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGroupMember = `-- name: RemoveGroupMember :execresult
DELETE FROM user_group_members
WHERE user_group_id = $1 AND user_id = $2
`

type RemoveGroupMemberParams struct {
	UserGroupID uuid.UUID `json:"user_group_id"`
	UserID      uuid.UUID `json:"user_id"`
}

// RemoveGroupMember: Removes a user's membership from a user group
// Returns the number of affected rows to determine if membership existed
// No error if membership doesn't exist (idempotent operation)
func (q *Queries) RemoveGroupMember(ctx context.Context, arg RemoveGroupMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeGroupMember, arg.UserGroupID, arg.UserID)
}
