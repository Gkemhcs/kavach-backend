// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package groupsdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// AddGroupMember: Creates a membership relationship between a user and a user group
	// Enforces unique constraint on (user_group_id, user_id) to prevent duplicate memberships
	// Returns the created membership record for confirmation
	AddGroupMember(ctx context.Context, arg AddGroupMemberParams) error
	// CreateGroup: Creates a new user group within an organization
	// Returns the complete group record including generated ID and timestamps
	// Enforces unique constraint on (organization_id, name) combination
	CreateGroup(ctx context.Context, arg CreateGroupParams) (UserGroup, error)
	// DeleteGroup: Removes a user group from an organization
	// Only deletes if the group exists and belongs to the specified organization
	// Cascading deletes will remove all group memberships automatically
	DeleteGroup(ctx context.Context, arg DeleteGroupParams) error
	// GetGroupByName: Retrieves a specific user group by name within an organization
	// Used for validation and lookup operations when group name is known
	// Returns complete group record including all metadata fields
	GetGroupByName(ctx context.Context, arg GetGroupByNameParams) (UserGroup, error)
	// ListGroupMembers: Retrieves all members of a specific user group
	// Joins with users table to get member details: id, name, email, membership date
	// Ordered by membership creation date (newest first) for consistent display
	ListGroupMembers(ctx context.Context, userGroupID uuid.UUID) ([]ListGroupMembersRow, error)
	// ListGroupsByOrg: Retrieves all user groups within an organization
	// Returns minimal fields needed for listing: id, name, description, created_at
	// Ordered by creation date (newest first) for consistent pagination
	ListGroupsByOrg(ctx context.Context, organizationID uuid.UUID) ([]ListGroupsByOrgRow, error)
	// RemoveGroupMember: Removes a user's membership from a user group
	// Returns the number of affected rows to determine if membership existed
	// No error if membership doesn't exist (idempotent operation)
	RemoveGroupMember(ctx context.Context, arg RemoveGroupMemberParams) (sql.Result, error)
}

var _ Querier = (*Queries)(nil)
