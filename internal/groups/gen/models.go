// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package groupsdb

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ResourceType string

const (
	ResourceTypeOrganization ResourceType = "organization"
	ResourceTypeSecretGroup  ResourceType = "secret_group"
	ResourceTypeEnvironment  ResourceType = "environment"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType `json:"resource_type"`
	Valid        bool         `json:"valid"` // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

type RoleType string

const (
	RoleTypeOwner  RoleType = "owner"
	RoleTypeAdmin  RoleType = "admin"
	RoleTypeMember RoleType = "member"
	RoleTypeViewer RoleType = "viewer"
	RoleTypeEditor RoleType = "editor"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType `json:"role_type"`
	Valid    bool     `json:"valid"` // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type UserRole string

const (
	UserRoleOwner  UserRole = "owner"
	UserRoleAdmin  UserRole = "admin"
	UserRoleEditor UserRole = "editor"
	UserRoleViewer UserRole = "viewer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Environment struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	SecretGroupID uuid.UUID      `json:"secret_group_id"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	Description   sql.NullString `json:"description"`
}

type EnvironmentMember struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

type OrgMember struct {
	OrgID  uuid.UUID `json:"org_id"`
	UserID uuid.UUID `json:"user_id"`
	Role   RoleType  `json:"role"`
}

type Organization struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     uuid.UUID      `json:"owner_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type ProviderCredential struct {
	ID            uuid.UUID       `json:"id"`
	EnvironmentID uuid.UUID       `json:"environment_id"`
	Provider      string          `json:"provider"`
	Credentials   []byte          `json:"credentials"`
	Config        json.RawMessage `json:"config"`
	CreatedBy     uuid.UUID       `json:"created_by"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

type RoleBinding struct {
	ID             uuid.UUID     `json:"id"`
	UserID         uuid.NullUUID `json:"user_id"`
	Role           UserRole      `json:"role"`
	ResourceType   ResourceType  `json:"resource_type"`
	ResourceID     uuid.UUID     `json:"resource_id"`
	CreatedAt      time.Time     `json:"created_at"`
	UpdatedAt      time.Time     `json:"updated_at"`
	OrganizationID uuid.UUID     `json:"organization_id"`
	SecretGroupID  uuid.NullUUID `json:"secret_group_id"`
	EnvironmentID  uuid.NullUUID `json:"environment_id"`
	GroupID        uuid.NullUUID `json:"group_id"`
}

type Secret struct {
	ID             uuid.UUID `json:"id"`
	VersionID      string    `json:"version_id"`
	Name           string    `json:"name"`
	ValueEncrypted []byte    `json:"value_encrypted"`
}

type SecretGroup struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	OrganizationID uuid.UUID      `json:"organization_id"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type SecretGroupMember struct {
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

type SecretVersion struct {
	ID            string    `json:"id"`
	EnvironmentID uuid.UUID `json:"environment_id"`
	CommitMessage string    `json:"commit_message"`
	CreatedAt     time.Time `json:"created_at"`
}

type User struct {
	ID         uuid.UUID      `json:"id"`
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
	Email      sql.NullString `json:"email"`
	Name       sql.NullString `json:"name"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
}

type UserGroup struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	OrganizationID uuid.UUID      `json:"organization_id"`
	Description    sql.NullString `json:"description"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type UserGroupMember struct {
	UserID      uuid.UUID `json:"user_id"`
	UserGroupID uuid.UUID `json:"user_group_id"`
	CreatedAt   time.Time `json:"created_at"`
}
