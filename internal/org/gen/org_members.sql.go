// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org_members.sql

package orgdb

import (
	"context"

	"github.com/google/uuid"
)

const addOrgMember = `-- name: AddOrgMember :exec
INSERT INTO org_members (org_id, user_id, role)
VALUES ($1, $2, $3)
`

type AddOrgMemberParams struct {
	OrgID  uuid.UUID `json:"org_id"`
	UserID uuid.UUID `json:"user_id"`
	Role   RoleType  `json:"role"`
}

// AddOrgMember adds a user as a member to an organization with a specific role.
// Used to grant access and permissions to users for an organization.
func (q *Queries) AddOrgMember(ctx context.Context, arg AddOrgMemberParams) error {
	_, err := q.db.ExecContext(ctx, addOrgMember, arg.OrgID, arg.UserID, arg.Role)
	return err
}

const getOrgMember = `-- name: GetOrgMember :one
SELECT org_id, user_id, role FROM org_members
WHERE org_id = $1 AND user_id = $2
`

type GetOrgMemberParams struct {
	OrgID  uuid.UUID `json:"org_id"`
	UserID uuid.UUID `json:"user_id"`
}

// GetOrgMember fetches a specific member of an organization by user ID.
// Used to check membership and permissions for a user in an organization.
func (q *Queries) GetOrgMember(ctx context.Context, arg GetOrgMemberParams) (OrgMember, error) {
	row := q.db.QueryRowContext(ctx, getOrgMember, arg.OrgID, arg.UserID)
	var i OrgMember
	err := row.Scan(&i.OrgID, &i.UserID, &i.Role)
	return i, err
}

const listOrgMembers = `-- name: ListOrgMembers :many
SELECT org_id, user_id, role FROM org_members
WHERE org_id = $1
`

// ListOrgMembers returns all members of a given organization.
// Used to display or manage all users with access to an organization.
func (q *Queries) ListOrgMembers(ctx context.Context, orgID uuid.UUID) ([]OrgMember, error) {
	rows, err := q.db.QueryContext(ctx, listOrgMembers, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrgMember
	for rows.Next() {
		var i OrgMember
		if err := rows.Scan(&i.OrgID, &i.UserID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOrgMember = `-- name: RemoveOrgMember :exec
DELETE FROM org_members
WHERE org_id = $1 AND user_id = $2
`

type RemoveOrgMemberParams struct {
	OrgID  uuid.UUID `json:"org_id"`
	UserID uuid.UUID `json:"user_id"`
}

// RemoveOrgMember removes a user from an organization.
// Used to revoke access and permissions for a user in an organization.
func (q *Queries) RemoveOrgMember(ctx context.Context, arg RemoveOrgMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeOrgMember, arg.OrgID, arg.UserID)
	return err
}
