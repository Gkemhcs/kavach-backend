// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package orgdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations ( name, description,owner_id)
VALUES ( $1, $2, $3)
RETURNING id, name, description, owner_id, created_at, updated_at
`

type CreateOrganizationParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     uuid.UUID      `json:"owner_id"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.Description, arg.OwnerID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, description, owner_id, created_at, updated_at FROM organizations WHERE id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizationByName = `-- name: GetOrganizationByName :one
SELECT id, name, description, owner_id, created_at, updated_at FROM organizations WHERE name = $1 and owner_id = $2
`

type GetOrganizationByNameParams struct {
	Name    string    `json:"name"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) GetOrganizationByName(ctx context.Context, arg GetOrganizationByNameParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByName, arg.Name, arg.OwnerID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganizationsByOwner = `-- name: ListOrganizationsByOwner :many
SELECT id, name, description, owner_id, created_at, updated_at FROM organizations WHERE owner_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListOrganizationsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, description, owner_id, created_at, updated_at
`

type UpdateOrganizationParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
