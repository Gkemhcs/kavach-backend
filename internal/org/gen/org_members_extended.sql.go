// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org_members_extended.sql

package orgdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const listMembersOfOrganization = `-- name: ListMembersOfOrganization :many
SELECT 
  om.user_id,
  om.role,
  om.org_id,
  o.name AS org_name
FROM org_members om
JOIN organizations o ON om.org_id = o.id
WHERE om.org_id = $1
`

type ListMembersOfOrganizationRow struct {
	UserID  uuid.UUID `json:"user_id"`
	Role    RoleType  `json:"role"`
	OrgID   uuid.UUID `json:"org_id"`
	OrgName string    `json:"org_name"`
}

func (q *Queries) ListMembersOfOrganization(ctx context.Context, orgID uuid.UUID) ([]ListMembersOfOrganizationRow, error) {
	rows, err := q.db.QueryContext(ctx, listMembersOfOrganization, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersOfOrganizationRow
	for rows.Next() {
		var i ListMembersOfOrganizationRow
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.OrgID,
			&i.OrgName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationsWithMember = `-- name: ListOrganizationsWithMember :many
SELECT 
  o.id AS org_id,
  o.name,
  o.created_at,
  om.user_id,
  om.role
FROM org_members om
JOIN organizations o ON om.org_id = o.id
WHERE om.user_id = $1
`

type ListOrganizationsWithMemberRow struct {
	OrgID     uuid.UUID `json:"org_id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UserID    uuid.UUID `json:"user_id"`
	Role      RoleType  `json:"role"`
}

func (q *Queries) ListOrganizationsWithMember(ctx context.Context, userID uuid.UUID) ([]ListOrganizationsWithMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationsWithMember, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrganizationsWithMemberRow
	for rows.Next() {
		var i ListOrganizationsWithMemberRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.CreatedAt,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
