// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: environment_members.sql

package environmentdb

import (
	"context"

	"github.com/google/uuid"
)

const addEnvironmentMember = `-- name: AddEnvironmentMember :exec
INSERT INTO environment_members (environment_id, user_id, role)
VALUES ($1, $2, $3)
`

type AddEnvironmentMemberParams struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

func (q *Queries) AddEnvironmentMember(ctx context.Context, arg AddEnvironmentMemberParams) error {
	_, err := q.db.ExecContext(ctx, addEnvironmentMember, arg.EnvironmentID, arg.UserID, arg.Role)
	return err
}

const getEnvironmentMember = `-- name: GetEnvironmentMember :one
SELECT environment_id, user_id, role FROM environment_members
WHERE environment_id = $1 AND user_id = $2
`

type GetEnvironmentMemberParams struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	UserID        uuid.UUID `json:"user_id"`
}

func (q *Queries) GetEnvironmentMember(ctx context.Context, arg GetEnvironmentMemberParams) (EnvironmentMember, error) {
	row := q.db.QueryRowContext(ctx, getEnvironmentMember, arg.EnvironmentID, arg.UserID)
	var i EnvironmentMember
	err := row.Scan(&i.EnvironmentID, &i.UserID, &i.Role)
	return i, err
}

const listEnvironmentMembers = `-- name: ListEnvironmentMembers :many
SELECT environment_id, user_id, role FROM environment_members
WHERE environment_id = $1
`

func (q *Queries) ListEnvironmentMembers(ctx context.Context, environmentID uuid.UUID) ([]EnvironmentMember, error) {
	rows, err := q.db.QueryContext(ctx, listEnvironmentMembers, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvironmentMember
	for rows.Next() {
		var i EnvironmentMember
		if err := rows.Scan(&i.EnvironmentID, &i.UserID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeEnvironmentMember = `-- name: RemoveEnvironmentMember :exec
DELETE FROM environment_members
WHERE environment_id = $1 AND user_id = $2
`

type RemoveEnvironmentMemberParams struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	UserID        uuid.UUID `json:"user_id"`
}

func (q *Queries) RemoveEnvironmentMember(ctx context.Context, arg RemoveEnvironmentMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeEnvironmentMember, arg.EnvironmentID, arg.UserID)
	return err
}
