// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package environmentdb

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type RoleType string

const (
	RoleTypeOwner  RoleType = "owner"
	RoleTypeAdmin  RoleType = "admin"
	RoleTypeMember RoleType = "member"
	RoleTypeViewer RoleType = "viewer"
	RoleTypeEditor RoleType = "editor"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType `json:"role_type"`
	Valid    bool     `json:"valid"` // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type Environment struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	SecretGroupID uuid.UUID      `json:"secret_group_id"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	Description   sql.NullString `json:"description"`
}

type EnvironmentMember struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

type OrgMember struct {
	OrgID  uuid.UUID `json:"org_id"`
	UserID uuid.UUID `json:"user_id"`
	Role   RoleType  `json:"role"`
}

type Organization struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     uuid.UUID      `json:"owner_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type SecretGroup struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	OrganizationID uuid.UUID      `json:"organization_id"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type SecretGroupMember struct {
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

type User struct {
	ID         uuid.UUID      `json:"id"`
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
	Email      sql.NullString `json:"email"`
	Name       sql.NullString `json:"name"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
}
