// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: environment_members_extended.sql

package environmentdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const listEnvironmentsWithMember = `-- name: ListEnvironmentsWithMember :many
SELECT 
  e.id AS environment_id,
  e.name,
  e.secret_group_id,
  e.created_at,
  em.user_id,
  em.role
FROM environment_members em
JOIN environments e ON em.environment_id = e.id
WHERE em.user_id = $1
`

type ListEnvironmentsWithMemberRow struct {
	EnvironmentID uuid.UUID `json:"environment_id"`
	Name          string    `json:"name"`
	SecretGroupID uuid.UUID `json:"secret_group_id"`
	CreatedAt     time.Time `json:"created_at"`
	UserID        uuid.UUID `json:"user_id"`
	Role          RoleType  `json:"role"`
}

func (q *Queries) ListEnvironmentsWithMember(ctx context.Context, userID uuid.UUID) ([]ListEnvironmentsWithMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, listEnvironmentsWithMember, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEnvironmentsWithMemberRow
	for rows.Next() {
		var i ListEnvironmentsWithMemberRow
		if err := rows.Scan(
			&i.EnvironmentID,
			&i.Name,
			&i.SecretGroupID,
			&i.CreatedAt,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembersOfEnvironment = `-- name: ListMembersOfEnvironment :many
SELECT 
  em.user_id,
  em.role,
  em.environment_id,
  e.name AS environment_name
FROM environment_members em
JOIN environments e ON em.environment_id = e.id
WHERE em.environment_id = $1
`

type ListMembersOfEnvironmentRow struct {
	UserID          uuid.UUID `json:"user_id"`
	Role            RoleType  `json:"role"`
	EnvironmentID   uuid.UUID `json:"environment_id"`
	EnvironmentName string    `json:"environment_name"`
}

func (q *Queries) ListMembersOfEnvironment(ctx context.Context, environmentID uuid.UUID) ([]ListMembersOfEnvironmentRow, error) {
	rows, err := q.db.QueryContext(ctx, listMembersOfEnvironment, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersOfEnvironmentRow
	for rows.Next() {
		var i ListMembersOfEnvironmentRow
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.EnvironmentID,
			&i.EnvironmentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
