// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package environmentdb

import (
	"context"

	"github.com/google/uuid"
)

const createEnvironment = `-- name: CreateEnvironment :one
INSERT INTO environments (name, secret_group_id)
VALUES ( $1, $2)
RETURNING id, name, secret_group_id, created_at, updated_at
`

type CreateEnvironmentParams struct {
	Name          string    `json:"name"`
	SecretGroupID uuid.UUID `json:"secret_group_id"`
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRowContext(ctx, createEnvironment, arg.Name, arg.SecretGroupID)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SecretGroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEnvironment = `-- name: DeleteEnvironment :exec
DELETE FROM environments WHERE id = $1
`

func (q *Queries) DeleteEnvironment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEnvironment, id)
	return err
}

const getEnvironmentByID = `-- name: GetEnvironmentByID :one
SELECT id, name, secret_group_id, created_at, updated_at FROM environments WHERE id = $1
`

func (q *Queries) GetEnvironmentByID(ctx context.Context, id uuid.UUID) (Environment, error) {
	row := q.db.QueryRowContext(ctx, getEnvironmentByID, id)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SecretGroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEnvironmentsBySecretGroup = `-- name: ListEnvironmentsBySecretGroup :many
SELECT id, name, secret_group_id, created_at, updated_at FROM environments WHERE secret_group_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListEnvironmentsBySecretGroup(ctx context.Context, secretGroupID uuid.UUID) ([]Environment, error) {
	rows, err := q.db.QueryContext(ctx, listEnvironmentsBySecretGroup, secretGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SecretGroupID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnvironment = `-- name: UpdateEnvironment :one
UPDATE environments
SET name = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, secret_group_id, created_at, updated_at
`

type UpdateEnvironmentParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateEnvironment(ctx context.Context, arg UpdateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRowContext(ctx, updateEnvironment, arg.ID, arg.Name)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SecretGroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
