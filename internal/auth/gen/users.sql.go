// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package userdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    provider, provider_id, email, name, avatar_url
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, provider, provider_id, email, name, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
	Email      sql.NullString `json:"email"`
	Name       sql.NullString `json:"name"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
}

// CreateUser inserts a new user into the users table and returns the created user.
// Used during initial OAuth registration when a user logs in for the first time.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Provider,
		arg.ProviderID,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

// DeleteUser removes a user from the users table by ID.
// Used for account deletion and admin operations.
func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByGithubUserName = `-- name: GetUserByGithubUserName :one
SELECT id, provider, provider_id, email, name, avatar_url, created_at, updated_at FROM users
WHERE name = $1 and provider = 'github'
`

func (q *Queries) GetUserByGithubUserName(ctx context.Context, name sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGithubUserName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, provider, provider_id, email, name, avatar_url, created_at, updated_at FROM users
WHERE id = $1
LIMIT 1
`

// GetUserByID fetches a user by their unique ID.
// Used for user profile lookups and internal references.
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT id, provider, provider_id, email, name, avatar_url, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2
LIMIT 1
`

type GetUserByProviderIDParams struct {
	Provider   string `json:"provider"`
	ProviderID string `json:"provider_id"`
}

// GetUserByProviderID fetches a user by provider and provider_id.
// Used to look up users during login and token refresh.
func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderID, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (provider, provider_id, email, name, avatar_url)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (provider, provider_id) DO UPDATE
SET email = EXCLUDED.email,
    name = EXCLUDED.name,
    avatar_url = EXCLUDED.avatar_url,
    updated_at = now()
RETURNING id, provider, provider_id, email, name, avatar_url, created_at, updated_at
`

type UpsertUserParams struct {
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
	Email      sql.NullString `json:"email"`
	Name       sql.NullString `json:"name"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
}

// UpsertUser inserts or updates a user based on provider and provider_id.
// Ensures user info is always up-to-date after OAuth login.
func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, upsertUser,
		arg.Provider,
		arg.ProviderID,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
